# 25 март 2024

'''192) Текстовый файл 24—191.txt содержит строку из заглавных латинских букв, всего не более чем
из 10**6 символов. Определите количество подстрок длиной не более 12 символов, которые
начинаются и заканчиваются буквой А и не содержат других букв А (кроме первой и последней) и
букв В.'''

"""f = open('files/24data__3kmim/24-191.txt')
s = f.readline()
t = s.split('A')
print(s[0], s[-1])  # первый и последний семволы != "A"
c = 0
print(t[:20])
for i in t[1:-1]: #т.к. мы сплитнули по 'A'
    if (len(i) <= 10) and (not 'B' in i): #<= 10 т.к. 12 - 2('A')
        c += 1
print(c)"""

'''197) Текстовый файл 24—197.txt содержит строку из заглавных латинских букв Х, У и 2, всего не
более чем из 10**6 символов. Определите максимальное количество идущих подряд троек
символов ZXY или ZYX.'''

'''
f = open('files/24data__3kmim/24-197.txt')
#s = 'xxxxZXYZYXYYZXZXZXxxxxxxxxZXYxxx'
s = f.readline()
while 'ZXY' in s: s = s.replace('ZXY', '*') #while - чтоб наверняка
while 'ZYX' in s: s = s.replace('ZYX', '*')
print(s)
for i in range (len(s)+5): #***** если вся строка в итоге окажется подходящей
    if '*'*i in s:
        print(i)
'''

'''224) Текстовый файл 24—224.txt содержит строку из символов А, В и С, всего не более чем 10**6
символов. Найдите максимальную длину строки, состоящей только из комбинаций ВАС и САВ.
Например, в строке ВАВАВАССАВСАВСВ такая подстрока ВАССАВСАВ (длина 9).'''
# ВАCABCABCAB *AB** может быть окончание или начало подходящей строки
# меняем BACAB на BAC_CAB
# меняем CABAC на CAB_BAC
'''
f = open('files/24data__3kmim/24-224.txt')
s = f.readline()

while 'BACAB' in s: s = s.replace('BACAB', 'BAC_CAB')
while 'CABAC' in s: s = s.replace('CABAC', 'CAB_BAC')
s = s.replace('BAC', '***').replace('CAB', '***')

for i in range(len(s)+10):
    if '*'*i in s:
        print(i)'''
'''
#универсальный подход:
f = open('files/24data__3kmim/24-224.txt')
s = f.readline()
#print(s[:20]) #BCA BBC ABC ABA CCA BCA BC
t = ['BAC', 'CAB']
l = lmax = 0
for i in range(2, len(s), 3): # перепрыгиваем по 3 символа
    if s[i:i+3] in t:
        l += 3
        lmax = max(lmax, l)
    else:
        l = 0
print(lmax)'''

'''211) Текстовый файл 24—211.txt содержит строку из набора А, В, С, D, Е, Б, всего не более чем из
10**6 символов. Найдите максимальное количество подряд идущих четвёрок символов АВЕС, BDAC,
CAFB, CFBA, стоящих одна за другой и пересекающихся с соседними четвёрками одной буквой.
Например, в строке BDEABECAFBDACBD такие пары составляют подстроку ABECAFBDAC = АВЕС +
CAFB + BDAC, итого З четвёрки.'''
'''
f = open('files/24data__3kmim/24-211.txt')
s = f.readline()
t = ['ABEC', 'CAFB', 'BDAC', 'CFBA'] #список необходимых комбинаций ABECAFBDAC
l = lmax = 0
#проход по строке с шагом З (так как четверки должны пересекаться)
#и подсчет максимального количества четверок
for i in range(0, len(s), 3): #перепрыгиваем по 3 символа(пересекается одной буквой, поэтому)
    if s[i:i+4] in t:
        l += 1
        lmax = max(lmax, l)
    else:
        l = 0
print(lmax)
'''

'''183) Текстовый файл 24—181.txt содержит строку из заглавных латинских букв и точек, всего не
более чем из 10**6 символов. Определите максимальное количество идущих подряд символов,
среди которых не более трёх точек.'''  # чтобы было как можно больше, берем ровно 3 точки
'''
#s = 'OOO.OOOOOO.OOO.OOOOOO.OOO.OOOOOO.OOO'
f = open('files/24data__3kmim/24-181.txt')
s = f.readline()
t = s.split('.')
print(t)
m = list(map(len, t))
print(m)
mx = 0
for i in range(len(m)):
    if sum(m[i:i+4]) > mx:
        mx = sum(m[i:i+4])
print(mx+3) #3 точки, которые мы сплитанули
'''
'''265) (ЕГЭ-2023) Текстовый файл 24—263.txt состоит не более чем из 10**6 символов и содержит
только заглавные буквы латинского алфавита. Определите максимальную длину подстроки, в
которой символ Y встречается не более 150 раз.'''
'''
f = open('files/24data__3kmim/24-263.txt')
s = f.readline()
m = list(map(len, s.split('Y')))
mx = 0
for i in range(len(m)):
    if sum(m[i:i+151]) > mx:
        mx = sum(m[i:i+151])
print(mx+150) #3 точки, которые мы сплитанули
'''
'''
#Решение "по-дурацки"
s = 'aaaaabccc12345aaaabcccc4564656465aaabbbcc'

a = 'qwertyuiopasdfghjklzxcvbnm'

for i in a:
    s = s.replace(i,'*')
print(s)
a = s.split('*')
print(a)
mx = max(len(i) for i in a)
print(mx)
'''

'''267) (ЕГЭ-2023) Текстовый файл 24—264.txt состоит не более чем из 10**6 символов и содержит
только заглавные буквы латинского алфавита и цифры. Определите максимальную длину
подстроки, которая может являться записью числа в шестнадцатеричной системе счисления.'''

"""#s = '00ABC0012WWWWWWWWWWWWABC23QQQQQQQ'
s = open('files/24data__3kmim/24-264.txt').readline()
a = sorted('QWERYUIOPASDFGHJKLZXCVBNM')[6:]
print(a)

for i in a:
    s = s.replace(i, '*')
print(s)
a = s.split('*')
print(a)
b = [hex(int(i, 16))[2:] for i in a if i]
print(b)
mx = max(len(i) for i in a)
print(mx)"""

# № 19254 ЕГКР 21.12.24 (Уровень: Базовый)
"""Текстовый файл состоит из символов F, G, Q, R, S и W. 
Определите в прилагаемом файле максимальное количество идущих подряд символов, 
среди которых подстрока FSRQ встречается ровно 80 раз.
Для выполнения этого задания следует написать программу."""
# Кабанов
"""s = open('files/24_19254.txt').readline().rstrip()

l = 0
m = 0
k = 0
sub = ''

for r in range(3, len(s)):
    if s[r - 3] + s[r - 2] + s[r - 1] + s[r] == 'FSRQ':
        k += 1
    while k > 80:
        if s[l] + s[l + 1] + s[l + 2] + s[l + 3] == 'FSRQ':
            k -= 1
        l += 1
    if k == 80:
        m = max(m, r - l + 1)
print(m)  # 2379"""

# Ермаков
"""s = open('files/24_19254.txt').readline().rstrip()
sp = []
a = 0
for i in range(s.count('FSRQ')):
    sp.append(s.index('FSRQ', a))
    a = s.index('FSRQ', a) + 1
ans = max(sp[80] + 3, len(s) - sp[-81] - 1)
for i in range(1, len(sp) - 82):
    ans = max(ans, sp[i + 81] - sp[i] + 2)
print(ans)  # 2379"""

# Родя
"""s = open('files/24_егкрдек.txt').readline()
s = s.replace('FGSW', ' ').split()
max_sm = -float('inf')
for i in range(len(s) - 85):
    sm = sum(len(kusok) for kusok in s[i: i+86])
    if sm > max_sm:
        max_sm = sm
        ans_i = i
print(ans_i, len(s), max_sm + 85 * 4 + 6)  # 1447"""
# строка с которой начинается по середине =>
# с боков стоит пробел =>
# + по 3 буквы в начале и в конце

# SS feat Родя
"""s = open('files/24_19254.txt').readline()
s = s.replace('FSRQ', ' ').split()
max_sm = -float('inf')
for i in range(len(s) - 80):
    sm = sum(len(kusok) for kusok in s[i: i+81])
    if sm > max_sm:
        max_sm = sm
        ans_i = i
print(ans_i, len(s), max_sm + 80 * 4 + 6)  # 2379"""

# ALEXMATH
"""base = ''

s = open(base + 'files/24_19254.txt').readline().strip()
pos = [-1]
i = 0
ls = len(s)
while i < ls:
    if s[i:i+4] == 'FSRQ':
        pos.append(i)
        i += 4
    else:
        i += 1
if pos[-1] + 4 != ls:
    pos.append(ls - 3)
mx = max([b + 2 - a for a, b in zip(pos, pos[81:])])
print(mx)  # 2379"""

"""(№ 7789) Текстовый файл 24-307.txt состоит не более чем из 10**6 символов и 
содержит только цифры шестнадцатеричной системы счисления, а также знаки «+» и «*» (сложения и умножения). 
Определите максимальное количество символов в непрерывной последовательности, которая заканчивается символами CB, 
перед которыми следует правильное арифметическое выражение с целыми неотрицательными числами (без знака), 
записанными в десятичной системе счисления. 
В этом выражении никакие два знака арифметических операций не стоят рядом. 
В записи чисел отсутствуют незначащие (ведущие) нули. 
В ответе укажите количество символов в найденном выражении."""

# AlexMath
"""from re import findall

base = ''
s = open('files/24-307.txt').readline().strip()
expr = findall(r'[1-9][0-9]*(?:[+*][1-9][0-9]*)*CB', s)
print(max(len(x) for x in expr))  # 83"""

"""(№ 7788) Текстовый файл 24-307.txt состоит не более чем из 10**6 символов и 
содержит только цифры шестнадцатеричной системы счисления, а также знаки «+» и «*» (сложения и умножения). 
Определите максимальное количество символов в непрерывной последовательности, которая заканчивается символом B, 
перед которым следует правильное арифметическое выражение с целыми неотрицательными числами (без знака), 
записанными в десятичной системе счисления. В этом выражении никакие два знака арифметических операций не стоят рядом. 
В записи чисел отсутствуют незначащие (ведущие) нули. В ответе укажите количество символов в найденном выражении."""

"""from re import findall

s = open('files/24-307.txt').readline().strip()
expr = findall(r'[1-9][0-9]*(?:[+*][1-9][0-9]*)*B', s)
ans = max(expr, key=len)
print(ans, len(ans))  # 199"""

"""(№ 7787) Текстовый файл 24-306.txt состоит не более чем из 10**6 символов и 
содержит только цифры шестнадцатеричной системы счисления, а также знаки «+» и «*» (сложения и умножения). 
Определите максимальное количество символов в непрерывной последовательности, которая начинается символами AFD, 
за которыми следует правильное арифметическое выражение с целыми неотрицательными числами (без знака), 
записанными в десятичной системе счисления. В этом выражении никакие два знака арифметических операций не стоят рядом. 
В записи чисел отсутствуют незначащие (ведущие) нули. В ответе укажите количество символов в найденном выражении."""

"""from re import findall

s = open('files/24-306.txt').readline().rstrip()
expr = findall(r'AFD[1-9][0-9]*(?:[+*][1-9][0-9]*)*', s)
ans = max(expr, key=len)
print(ans, len(ans))  # 70"""

"""(№ 7786) Текстовый файл 24-305.txt состоит не более чем из 10**6 символов и 
содержит только цифры шестнадцатеричной системы счисления, а также знаки «+» и «*» (сложения и умножения). 
Определите максимальное количество символов в непрерывной последовательности, которая начинается символами AF, 
за которыми следует правильное арифметическое выражение с целыми неотрицательными числами (без знака), 
записанными в десятичной системе счисления. В этом выражении никакие два знака арифметических операций не стоят рядом. 
В записи чисел отсутствуют незначащие (ведущие) нули. В ответе укажите количество символов в найденном выражении."""

"""from re import findall

s = open('files/24-305.txt').readline().strip()
expr = findall(r'AF[1-9][0-9]*(?:[*+][1-9][0-9]*)*', s)
ans = max(expr, key=len)
print(ans, len(ans))  # 75"""

"""(№ 7785) Текстовый файл 24-304.txt состоит не более чем из 10**6 символов и 
содержит только цифры шестнадцатеричной системы счисления, а также знаки «+» и «*» (сложения и умножения). 
Определите максимальное количество символов в непрерывной последовательности, которая начинается символов A, 
за которым следует правильное арифметическое выражение с целыми неотрицательными числами (без знака), 
записанными в десятичной системе счисления. В этом выражении никакие два знака арифметических операций не стоят рядом. 
В записи чисел отсутствуют незначащие (ведущие) нули. В ответе укажите количество символов в найденном выражении."""

"""from re import findall

base = ''
s = open(base + 'files/24-304.txt').readline().strip()
expr = findall(r'A[1-9][0-9]*(?:[+*][1-9][0-9]*)*', s)
print(max(len(x) for x in expr))  # 145"""

"""(№ 7744) (К. Багдасарян) Текстовый файл 24-303.txt состоит не более чем из 10**6 символов 
и содержит только десятичные цифры, знаки арифметических операций, а также круглые, квадратные и фигурные скобки: 
«(», «)», «[», «]», «{», «}». Назовем выражение корректным, если:
  1) оно начинается с открывающей скобки и заканчивается парной ей закрывающей скобкой того же типа;
  2) скобки внутри выражения сбалансированы, т.е.:
    - для каждой открывающей скобки есть закрывающая того же типа;
    - скобки открываются и закрываются в правильном порядке.
Примеры корректных выражений: [{1+2}(3+++4)], [(1***2){3}45]
Примеры некорректных выражений:
  (1+2]) – (лишняя закрывающая скобка ]);
  (1+2] – (открывающая и закрывающая скобки не соответствуют друг другу).
Определите максимальное количество символов в непрерывной последовательности текста, которая представляет собой корректное выражение. 
Гарантируется, что в тексте присутствуют корректные выражения. В ответе укажите количество символов."""

# Deepseek
"""def max_correct_expression_length(s):
    max_len = 0
    n = len(s)
    stack = []
    # Перебираем все возможные подстроки
    for i in range(n):
        stack = []
        for j in range(i, n):
            char = s[j]
            if char in '([{':
                stack.append(char)
            elif char in ')]}':
                if not stack:
                    break
                last_open = stack.pop()
                if (char == ')' and last_open != '(') or \
                   (char == ']' and last_open != '[') or \
                   (char == '}' and last_open != '{'):
                    break
            # Если стек пуст, значит, подстрока сбалансирована
            if not stack:
                current_len = j - i + 1
                stroka = s[i:j+1]
                if current_len > max_len:
                    max_len = current_len
                    max_str = stroka
    return max_len, max_str

# Пример использования
with open('files/24-303.txt', 'r') as file:
    s = file.read().strip()

result = max_correct_expression_length(s)
print(result)  # 59, {3456[](788){98+98}[[(545-5)]]+45((12-2345-2345)+2345*235)}"""

"""	(№ 7743) (К. Багдасарян) Текстовый файл 24-302.txt состоит не более чем из 10**6 символов и 
содержит только десятичные цифры, знаки арифметических операций, а также круглые и квадратные скобки: «(», «)», «[», «]». 
Назовем выражение корректным, если:
  1) оно начинается с открывающей скобки и заканчивается парной ей закрывающей скобкой того же типа;
  2) скобки внутри выражения сбалансированы, т.е.:
    - для каждой открывающей скобки есть закрывающая того же типа;
    - скобки открываются и закрываются в правильном порядке.
Примеры корректных выражений: [(1+2[1+])(3+++4)], [(1***2)345]
Примеры некорректных выражений:
  (1+2]) – (лишняя закрывающая скобка ]);
  (1+2] – (открывающая и закрывающая скобки не соответствуют друг другу).
Определите максимальное количество символов в непрерывной последовательности текста, 
которая представляет собой корректное выражение. 
Гарантируется, что в тексте присутствуют корректные выражения. В ответе укажите количество символов."""

"""s = open('files/24-302.txt').readline().strip()
max_str = ''
stack = []
for i in range(len(s)):
    stack = []
    for j in range(i, len(s)):
        char = s[j]
        if char in '({[':
            stack.append(char)  # добавляем в стэк открывающие скобки
        elif char in ')}]':
            if not stack:  # если этэк пуст, то break
                break
            last_open = stack.pop()  # берем последнюю скобку в стэке
            if not stack and (char == ')' and s[i] == '(') or \
                    (char == ']' and s[i] == '[') or \
                    (char == '}' and s[i] == '{'):
                curent_str = s[i:j + 1]
                max_str = max(curent_str, max_str, key=len)
                break
            if (char == ')' and last_open != '(') or \
                    (char == ']' and last_open != '[') or \
                    (char == '}' and last_open != '{'):  # проверяем совпадает ли последняя скобка с текущей
                break


print(max_str, len(max_str))  # (234-2676-247-(2678-225)+(463-[123]-([9876]))(545)[4536]*[455-9993]) 68"""

"""(№ 7742) (К. Багдасарян) Текстовый файл 24-301.txt состоит не более чем из 10**6 символов и 
содержит только десятичные цифры, знаки арифметических операций и круглые скобки: «(», «)». 
Назовем выражение корректным, если:
  1) оно начинается с открывающей скобки «(» и заканчивается парной ей закрывающей скобкой «)»;
  2) скобки внутри выражения сбалансированы, т.е.:
    - для каждой открывающей скобки есть закрывающая;
    - скобки открываются и закрываются в правильном порядке.
Примеры корректных выражений: ((1+2)(3+++4)), ((1***2)345)
Примеры некорректных выражений:
  (1+2)) – (лишняя закрывающая скобка);
  )1+2) – (скобки неправильно расположены);
  (1+2)(3+4) – всё выражение не охвачено скобками.
Определите максимальное количество символов в непрерывной последовательности текста, 
которая представляет собой корректное выражение. 
Гарантируется, что в тексте присутствуют корректные выражения. В ответе укажите количество символов."""

"""s = open('files/24-303.txt').readline().strip()
max_str = ''
stack = []
for i in range(len(s)):
    stack = []
    for j in range(i, len(s)):
        char = s[j]
        if char in '({[':
            stack.append(char)  # добавляем в стэк открывающие скобки
        elif char in ')}]':
            if not stack:  # если этэк пуст, то break
                break
            last_open = stack.pop()  # берем последнюю скобку в стэке
            if not stack and (char == ')' and s[i] == '('):
                curent_str = s[i:j + 1]
                max_str = max(curent_str, max_str, key=len)
                break
            if (char == ')' and last_open != '(') or \
                    (char == ']' and last_open != '[') or \
                    (char == '}' and last_open != '{'):  # проверяем совпадает ли последняя скобка с текущей
                break


print(max_str, len(max_str))  # (2362424-2676-247-(266878-2234235)+2452134(463-3333+56745)*47645) 65"""

"""(№ 7573) (ЕГЭ-2024) Текстовый файл 24-299.txt состоит не более чем из 10**6 символов и 
содержит только десятичные цифры, а также знаки «+» и «*» (сложения и умножения). 
Определите максимальное количество символов в непрерывной последовательности, 
являющейся корректным арифметическим выражением с целыми неотрицательными числами (без знака), 
значение которого равно нулю. В этом выражении никакие два знака арифметических операций не стоят рядом, 
порядок действий определяется по правилам математики. 
В записи чисел отсутствуют незначащие (ведущие) нули. В ответе укажите количество символов в найденном выражении."""

# SS
"""s = open('files/24-299.txt').readline().rstrip()
while '**' in s:
    s = s.replace('**', ' ')
while '++' in s:
    s = s.replace('++', ' ')
while '+*' in s:
    s = s.replace('+*', ' ')
while '*+' in s:
    s = s.replace('*+', ' ')
m = ''

for sub in s.split():
    sub = sub.strip('*').strip('+')
    if eval(sub) == 0:
        m = max(m, (sub), key=len)
print(m, len(m))
# 0+0*7620*0*0+0+0*26826+0+0*0+0+0*0*0*44621+0+0*0*0*0*0*57648*0+42164*0*48685+75879*0*0*50102*0*0+0*0+0+0 
# 104"""

# Deepseek
"""from re import findall

s = open('files/24-299.txt').readline().strip()
expr = findall(r'(?:0|[1-9]\d*)(?:[+*](?:0|[1-9]\d*))*', s)
ans = max((st for st in expr if eval(st) == 0), key=len)
print(ans, len(ans))
# 0+0*7620*0*0+0+0*26826+0+0*0+0+0*0*0*44621+0+0*0*0*0*0*57648*0+42164*0*48685+75879*0*0*50102*0*0+0*0+0+0 
# 104"""
"""	
№ 18285 (Уровень: Сложный)

(Л. Шастин) Текстовый файл состоит из десятичных цифр, знаков «+» и «*» (сложения и умножения). 
Рассматриваются непрерывные последовательности символов, которые являются корректными арифметическими выражениями 
с целыми положительными числами. В этих выражениях никакие два знака арифметических операций не стоят рядом, 
порядок действий определяется по правилам математики. В записи чисел отсутствуют незначащие (ведущие) нули. 
Определите максимальное количество чисел, входящих в одну из таких последовательностей."""
# Л. Шастин
"""s = '+' + open('files/24_18285.txt').readline().rstrip().replace('*', '+')
while '++' in s or '+0' in s:
    s = s.replace('++', '+ +').replace('+0', ' +')
m = 0
print(s.strip('+'))
for sub in s.split():
    sub = sub.strip('+')
    if '+' in sub:
        print(sub)
        m = max(m, len(sub.split('+')))
print(m)  # 44"""

"""(№ 7497) (ЕГЭ-2024) Текстовый файл 24-298.txt состоит не более чем из 10**6 символов 
и содержит только символы, обозначающие знаки «-», «*», и цифры 0, 7, 8, 9. 
Определите в прилагаемом файле максимальное количество идущих подряд символов, 
которые образуют математически правильную последовательность, в которую входят знаки «-» или «*» 
и натуральные числа без незначащих нулей."""

"""from re import findall

s = open('files/24-298.txt').readline().strip()
expr = findall(r'(?:0|[7-9][0, 7-9]+)(?:[-*][7-9][0, 7-9]+)+', s)
print(expr)
ans = max(expr, key=len)
print(ans, len(ans))
'''708899088-897979*870089877*7807-90*70*9880970088788909779707870790-
99089789798807880*77700*78907007777788897097770-99079997978790799997998087-
70*790700*9789-97-79*77700800807-79'''
# 177"""

"""(№ 7496) (ЕГЭ-2024) Текстовый файл 24-296.txt состоит не более чем из 10**6 символов
и содержит только буквы латинского алфавита A, B, C, D, E и F. 
Определите минимальное количество идущих подряд символов в прилагаемом файле, 
среди которых пара символов AF (в указанном порядке) встречается более 200 раз."""

# deepseek
"""s = open('files/24-296.txt').readline().strip()

min_length = float('inf')  # Начальное значение минимальной длины
left = 0  # Левый указатель
count_AF = 0  # Счетчик пар AF

# Перебираем правый указатель
for right in range(1, len(s)):
    # Если текущая пара символов — это AF, увеличиваем счетчик
    if s[right - 1] == 'A' and s[right] == 'F':
        count_AF += 1

    # Если количество AF превышает 200, обновляем минимальную длину
    while count_AF > 200:
        min_length = min(min_length, right - left + 1)
        # Уменьшаем окно, сдвигая левый указатель
        if s[left] == 'A' and s[left + 1] == 'F':
            count_AF -= 1
        left += 1

print(min_length)  # 9511"""

"""(№ 7495) (ЕГЭ-2024) Текстовый файл 24-296.txt состоит не более чем из 10**6 символов
и содержит только буквы латинского алфавита A, B, C, D, E и F. 
Определите максимальное количество идущих подряд символов в прилагаемом файле, 
среди которых пара символов СD (в указанном порядке) встречается ровно 160 раз."""

"""s = open('files/24-296.txt').readline().strip()

max_length = 0  # Инициализируем максимальную длину
left = 0  # Левый указатель
count_CD = 0  # Счетчик пар CD

# Перебираем правый указатель
for right in range(1, len(s)):
    # Если текущая пара символов — это CD, увеличиваем счетчик
    if s[right - 1] == 'C' and s[right] == 'D':
        count_CD += 1

    # Если количество CD превышает 160, сдвигаем левый указатель
    while count_CD > 160:
        if s[left] == 'C' and s[left + 1] == 'D':
            count_CD -= 1
        left += 1

    # Если количество CD равно 160, обновляем максимальную длину
    if count_CD == 160:
        max_length = max(max_length, right - left + 1)

print(max_length)  # 1288"""

"""(№ 7494) (ЕГЭ-2024) Текстовый файл 24-295.txt состоит не более чем из 10**6 символов и 
содержит только буквы латинского алфавита A, B, C, D, E и F. 
Определите максимальное количество идущих подряд символов в прилагаемом файле, 
среди которых пара символов DE (в указанном порядке) встречается не более 240 раз."""

"""s = open('files/24-295.txt').readline().strip()
max_length = 0
left = 0
count_DE = 0

for right in range(1, len(s)):
    if s[right - 1] == 'D' and s[right] == 'E':
        count_DE += 1

    while count_DE > 240:
        if s[left] == 'D' and s[left + 1] == 'E':
            count_DE -= 1
        left += 1

    if count_DE <= 240:
        max_length = max(max_length, right - left + 1)
print(max_length)"""

"""	(№ 7439) *(А. Минак) Текстовый файл 24-294.txt состоит не более чем из 10**6 символов и 
содержит только заглавные буквы латинского алфавита и десятичные цифры. 
Найдите максимальную длину подстроки, которая содержит ровно 80 цифр 7, 
не содержит латинских букв, и не содержит двух подряд идущих нечётных цифр."""

# SS
"""from string import ascii_uppercase

s = open('files/24-294.txt').readline().strip()
max_length = 0
left = 0
count_7 = 0

for right in range(1, len(s)):
    if s[right] == '7':
        count_7 += 1

    while count_7 > 80:
        if s[left] == '7':
            count_7 -= 1
        left += 1

    if (count_7 == 80 and
            sum(s[left:right + 1].count(n) for n in ascii_uppercase) == 0 and
            sum(s[left:right + 1].count(n1+n2) for n1 in '13579' for n2 in '13579') == 0):
        max_length = max(max_length, right - left + 1)
print(max_length)  # 479"""

"""(№ 7438) *(А. Минак) Текстовый файл 24-293.txt состоит не более чем из 10**6 символов и 
содержит только заглавные буквы латинского алфавита и десятичные цифры. 
Найдите максимальную длину подстроки, которая содержит ровно 100 символов D, не содержит цифр, 
и не содержит сочетаний символов DS и SD."""

"""s = open('files/24-293.txt').readline().strip()

left = 0
max_length = 0
count_D = 0

for right in range(1, len(s)):
    if s[right] == 'D':
        count_D += 1

    while count_D > 100:
        if s[left] == 'D':
            count_D -= 1
        left += 1

    if count_D == 100 and sum(s[left:right + 1].count(i) for i in ('DS', 'SD')) == 0:
        max_length = max(max_length, right - left + 1)
print(max_length)  # 644"""

"""	
№ 17641 Основная волна 19.06.24 (Уровень: Гроб)
Текстовый файл состоит из десятичных цифр, знаков «+» и «*» (сложения и умножения).
Определите максимальное количество символов в непрерывной последовательности, 
являющейся корректным арифметическим выражением с целыми неотрицательными числами 
(без знака), значение которого равно нулю. 
В этом выражении никакие два знака арифметических операций не стоят рядом, 
порядок действий определяется по правилам математики. 
В записи чисел отсутствуют незначащие (ведущие) нули.
В ответе укажите количество символов."""

"""s = open('files/24_17641.txt').readline().strip()
for i in '23456789':
    s = s.replace(i, '1')
for i in ('++', '**', '*+', '+*'):
    s = s.replace(i, ' ')

m = ''
for c in s.split():
    if len(c) > len(m):
        for i in range(len(c) - 1):
            if c[i] not in '*+' and c[i] + c[i + 1] not in ('00', '01'):
                sub = ''
                for j in range(i, len(c)):
                    sub += c[j]
                    if sub[-1] not in '+*' and eval(sub) == 0:
                        m = max(m, sub, key=len)
print(m, len(m))  # 142"""

# AlexMath
"""import re

s = open('files/24_17641.txt').readline().strip()

nn = r'[1-9]\d*'
zn = rf'(?:{nn}\*|0\*)*0(?:\*{nn}|\*0)*'
sum_prod = rf'{zn}(?:\+{zn})*'

arr = re.findall(f'{sum_prod}', s)

arr_max = max([x for x in arr], key=len)

print(arr_max, len(arr_max))  # 142"""

"""№ 17685 Пересдача 04.07.24 (Уровень: Гроб)"""

"""s = open('files/24_17685.txt').readline().strip()
for i in '23456789':
    s = s.replace(i, '1')
for i in ('++', '**', '*+', '+*'):
    s = s.replace(i, ' ')

m = ''
for c in s.split():
    if len(c) > len(m):
        for i in range(len(c) - 1):
            if c[i] not in '*+' and c[i] + c[i + 1] not in ('00', '01'):
                sub = ''
                for j in range(i, len(c)):
                    sub += c[j]
                    if sub[-1] not in '+*' and eval(sub) == 0:
                        m = max(m, sub, key=len)
print(m, len(m))  # 169"""

"""№ 18284 (Уровень: Средний)
(Л. Шастин) Текстовый файл состоит не более чем из 10**8 символов латиницы, входящих в слово «REVOLUTION». 
Найдите наименьшую длину подстроки, которая включает в себя подпоследовательность символов, образующих слово «LOVE». 
Например, для строки REVVVLAAORRVEARRLBOLRVER ответом будет являться число 7 — это длина подстроки LBOLRVE.
Для выполнения этого задания следует написать программу."""

# https://rutube.ru/video/512d3cd721420280d3e953a7f43a76fc/?r=wd&t=5636

"""s = open('files/24_18284.txt').readline().strip()
s = "REVVVLAAORRVEARRLBOLRVER"
min_l = float('inf')
pos = {let: [i for i in range(len(s)) if s[i] == let] for let in 'LOVE'}
# Создаём словарь со списками индексов для L, O, V, E в s
print(pos)  # {'L': [5, 16, 19], 'O': [8, 18], 'V': [2, 3, 4, 11, 21], 'E': [1, 12, 22]}
ind = {let: 0 for let in 'LOVE'}  # Индексы для текущих позиций в pos['L'], pos['O'], pos['V'], pos['E']
print(ind)  # {'L': 0, 'O': 0, 'V': 0, 'E': 0}
for left in range(len(pos['L'])):  # Перебираем все позиции для 'L'
    ind['L'] = left  # Устанавливаем текущий индекс для 'L'
    # Пока указатель текущего символа (например, 'O') не находится правее предыдущего (например, 'L'),
    # двигаем указатель вперёд
    for last, curr in zip('LOV', 'OVE'):  # составляет пары символов, перечисленных в последовательности
        while ind[curr] + 1 < len(pos[curr]) and pos[curr][ind[curr]] < pos[last][ind[last]]:
            ind[curr] += 1
    # После этого проверяем, что все символы идут в правильном порядке
    if all(pos[curr][ind[curr]] > pos[last][ind[last]] for last, curr in zip('LOV', 'OVE')):
        # Вычисляем длину текущей подстроки
        # Если длина меньше текущей минимальной, обновляем
        min_l = min(min_l, pos['E'][ind['E']] - pos['L'][ind['L']] + 1)
print(min_l)  # 2000031"""

# Евгений Смирнов
"""f = open('files/24_18284.txt')
s = f.readline()

b_l = b_lo = b_lov = -1
m = 10 ** 8

for i in range(len(s)):
    if s[i] == 'L':
        b_l = i
    if s[i] == 'O':
        b_lo = b_l
    if s[i] == 'V':
        b_lov = b_lo
    if s[i] == 'E' and b_lov != -1:
        m = min(m, i - b_lov + 1)

print(m)  # 2000031"""

# 24 №18530
# https://youtu.be/U65my47LR-c?si=ozowbjlOy_9haDK0&t=5636
# Шастин
# Изучить!
"""s = 'A' + open('files/24_18530.txt').readline().strip().replace('E', 'A') + 'A'
ind = [i for i in range(len(s)) if s[i] == 'A']
i = 1
mx = 0
while i < len(ind) - 3:
    d = (ind[i + 2] - ind[i + 1]) - (ind[i + 1] - ind[i])
    l = ind[i + 1] - ind[i]
    start = i
    while ind[i + 1] - ind[i] == l:
        i += 1
        l += d
    mx = max(mx, ind[i + 1] - ind[start - 1] - 1)
    i -= 1
print(mx)  # 107831"""

# 24 18530
"""s = 'A' + open('files/24_18530.txt').readline().strip().replace('E', 'A') + 'A'
ind = [i for i in range(len(s)) if s[i] == 'A']
i = 1
mx = 0
while i < len(ind) - 3:
    d = (ind[i + 2] - ind[i + 1]) - (ind[i + 1] - ind[i])
    l = ind[i + 1] - ind[i]
    start = i
    while ind[i + 1] - ind[i] == l:
        i += 1
        l += d
    mx = max(mx, ind[i + 1] - ind[start - 1] - 1)
    i -= 1
print(mx)  # 107831"""

# 24 18239
"""(Д. Бахтиев) Текстовый файл содержит цифры от 1 до 9 и знак арифметической операции «-» (вычитание). 
Определите максимальное количество символов в непрерывной последовательности, 
которая является корректным арифметическим выражением с целыми числами, 
чьё значение превышает -20000 (минус двадцать тысяч). 
Запрещается отрывать цифры от чисел, но разрешается брать их без знака. 
Например, в строке -23-456-789 нельзя взять выражение -456-78, но можно взять 23-456.
В ответе укажите количество символов."""
"""s = open('files/24_18239.txt').readline().rstrip()
while '--' in s: s = s.replace('--', '- -')
m = 0
for s1 in s.split():
    if s1.strip('-'):
        nums = list(map(int, s1.strip('-').split('-')))
        l = total_sum = total_len = 0
        for r in range(len(nums)):
            total_sum += nums[r]
            total_len += len(str(nums[r]))
            while total_sum - nums[l] * 2 >= 20_000 and l < r:
                total_sum -= nums[l]
                total_len -= len(str(nums[l]))
                l += 1
            m = max(m, total_len + r - l + (total_sum < 20_000))
print(m)  # 1095"""

# 19969
"""from re import findall

s = open('files/24_19969.txt').readline().strip()

expr = findall('(?:(?:[a-z])+@(?:[a-z])+[.](?:[a-z])+)', s)
ans = max((str(x) for x in expr), key=len)
print(len(ans), ans)  # 230"""

# 24
# №19884
"""s = open('files/24_19884.txt').readline().strip()
s = s.replace('-', '*').replace('6', '7').replace('8', '7').replace('9', '7').replace('**', '* *').replace('**', '* *')

while '*00' in s:
    s = s.replace('*00', '*0 *0')
s = s.replace('*07', '*0 7')
count = 0
for x in s.split():
    sub = x.strip('*')
    cnt = sub.count('7') + sub.count('0')
    for t in sub.split('*'):
        cnt -= len(t)
        for i in range(len(t)):
            if t[i] == '7' or i == len(t) - 1:
                count += cnt
print(count)  # 30460483"""

# 18285
"""from re import findall
s = open('files/24_18285.txt').readline().strip()

expr = findall('(?:0|[1-9]\d*)(?:[*+](?:0|[1-9]\d*))*', s)
ans = (max((str(x) for x in expr), key=len)).replace('+', '*')

ans = set(ans.split('*'))

print(len(ans), ans)  # 44"""

# 19969
"""Текстовый файл состоит не более чем из 10**6 символов и содержит только строчные латинские буквы, 
а также знаки «@» и «.» . Определите максимальное количество символов в 
непрерывной последовательности вида [буквы]@[буквы].[буквы] (например yasdamege@nasto.ballov). 
В ответе укажите количество символов."""

"""from re import findall

s = open('files/24_19969.txt').readline().strip()

expr = findall('(?:(?:[a-z])+@(?:[a-z])+[.](?:[a-z])+)', s)
ans = max((str(x) for x in expr), key=len)
print(len(ans), ans)  # 230"""

# https://informatikaexpert.ru/sredi-kotoryx-para-simvolov-cd-v-ukazannom-poryadke-vstrechaetsya-rovno-160-raz/#more-19763
"""Текстовый файл состоит из символов A, B, C, D, E и F.
Определите максимальное количество идущих подряд символов в прилагаемом файле, 
среди которых пара символов CD (в указанном порядке) встречается ровно 160 раз.
Для выполнения этого задания следует написать программу."""
# два указателя
"""f = open('files/24_17535.txt').readline()
l = m = 0
kcd = 0
for r in range(1, len(f)):
    if f[r - 1] + f[r] == 'CD': kcd += 1
    while kcd > 160:
        if f[l] + f[l + 1] == 'CD': kcd -= 1
        l += 1
    if kcd == 160:
        m = max(m, r - l + 1)
print(m)  # 9712"""

# сплитом
"""f = open('files/24_17535.txt').readline()
f = f.replace('CD', 'C D').split()
m = 0
for i in range(len(f) - 161):
    a = ''.join(f[i:i + 161])
    m = max(m, len(a))
print(m)  # 9712"""

"""
№ 19717 (Уровень: Средний)
(М. Попков) Текстовый файл состоит из символов A, E, G, I, L, M и R.
Определите в прилагаемом файле максимальное количество идущих подряд символов 
(длину непрерывной подпоследовательности), 
среди которых символ M встречается не более 278 раз."""
"""f = open('files/24.5_19717.txt').readline().strip()

l = m = 0
km = 0
for r in range(len(f)):
    if f[r] == 'M':
        km += 1
    while km > 278:
        if f[l] == 'M':
            km -= 1
        l += 1
    if km <= 278:
        m = max(m, r - l + 1)
print(m)  # 2473

s = open('files/24.5_19717.txt').readline().strip()
max_length = 0
left = 0
count_DE = 0

for right in range(len(s)):
    if s[right] == 'M':
        count_DE += 1

    while count_DE > 278:
        if s[left] == 'M':
            count_DE -= 1
        left += 1

    if count_DE <= 278:
        max_length = max(max_length, right - left + 1)
print(max_length)  # 2473"""

"""№ 19489 (Уровень: Средний)
(Л. Шастин) Текстовый файл состоит из символов F, S и W. 
Определите в прилагаемом файле максимальное количество идущих подряд символов, 
среди которых подстрока WWF встречается не более 120 раз, а подстрока WSFWW не встречается совсем.
Для выполнения этого задания следует написать программу."""
# 1
"""f = open('files/24_19489.txt').readline().strip()
m = 0
for s in f.split('WSFWW'):
    if len(s) > m:
        l = 0
        c_wwf = 0
        for r in range(2, len(s)):
            if s[r - 2] == 'W' and s[r - 1] == 'W' and s[r] == 'F':
                c_wwf += 1
            while c_wwf > 120:
                if s[l - 2] == 'W' and s[l - 1] == 'W' and s[l] == 'F':
                    c_wwf -= 1
                l += 1
            if c_wwf <= 120:
                m = max(m, r - l + 1)

print(4 + m + 4)  # 3080"""
# 2
"""f = open('files/24_19489.txt').readline().strip()
m = 0
f = f.replace('WSFWW', 'WSFW SFWW')
for s in f.split():
    if len(s) > m:
        l = 0
        c_wwf = 0
        for r in range(2, len(s)):
            if s[r - 2] == 'W' and s[r - 1] == 'W' and s[r] == 'F':
                c_wwf += 1
            while c_wwf > 120:
                if s[l - 2] == 'W' and s[l - 1] == 'W' and s[l] == 'F':
                    c_wwf -= 1
                l += 1
            if c_wwf <= 120:
                m = max(m, r - l + 1)

print(m)  # 3080"""

# Шастин
"""s = open('files/24_19489.txt').readline().strip()
l = k = m = 0
for r in range(2, len(s)):
    if s[r-2:r+1] == 'WWF':
        k += 1
    if s[r-4:r+1] == 'WSFWW':
        l = r - 3
        k = 'WWF' in s[l:r+1]
    while k > 120:
        if s[l:l+3] == 'WWF':
            k -= 1
        l += 1
    m = max(m, r - l + 1)
print(m)  # 3080"""

# Горбачев5
# 24
"""Задание 24 .
Текстовый файл состоит из десятичных цифр, знаков «+» и «*» (сложения и умножения).
Определите максимальное количество символов в непрерывной последовательности,
являющейся корректным арифметическим выражением с целыми неотрицательными
числами (без знака), значение которого равно 100. В этом выражении никакие два
знака арифметических операций не стоят рядом, порядок действий определяется по
правилам математики. В записи чисел отсутствуют незначащие (ведущие) нули.
В ответе укажите количество символов."""

"""s = open('files/24_горбачев5.txt').readline().strip()
for i in ('++', '**', '*+', '+*'):
    s = s.replace(i, ' ')

m = ''
for c in s.split():
    if len(c) > len(m):
        for i in range(len(c) - 1):
            if c[i] not in '*+' and c[i] + c[i + 1] not in (f'0{i}' for i in range(10)):
                sub = ''
                for j in range(i, len(c)):
                    sub += c[j]
                    if sub[-1] not in '*+' and eval(sub) == 100:
                        m = max(m, sub, key=len)
print(len(m), m)  # 80"""

# №19938
"""s = open('files/24_19938.txt').readline()
l = m = 0
c_z = 0
for r in range(len(s)):
    if s[r] == 'Z':
        c_z += 1
    while c_z > 4 or s[l] == '0':
        if s[l] == 'Z':
            c_z -= 1
        l += 1
    if int(s[l:r + 1], 36) % 36 == 0:
        m = max(m, r - l + 1)

print(m)  # 652"""

# №20394
"""s = open('files/24_20394.txt').readline()
l = 0
c_dec = 0
m = ''
for r in range(2, len(s)):
    if s[r - 2] + s[r - 1] + s[r] == 'DEC':
        c_dec += 1
    while c_dec > 75:
        if s[l] + s[l + 1] + s[l + 2] == 'DEC':
            c_dec -= 1
        l += 1
    if c_dec == 75:
        m = max(m, s[l:r + 1], key=len)
print(len(m), m)  # 787"""

"""s = open('files/24_20394.txt').readline()
s = s.replace('DEC', 'DE EC').split()
m = 0
for i in range(len(s) - 76):
    a = ''.join(s[i:i+76])
    m = max(m, len(a) - 75)
print(m)  # 787"""

# 24 шастин10
"""Текстовый файл состоит не более, чем из 7 200 000 прописных символов латинского алфавита. 
Назовем «перетройкой» такие две одинаковые непрерывные строковые подпоследовательности
длины З, которые пересекаются в одной букве (т.е. начало одной тройки совпадает с концом другой). 
Определите в прилагаемом файле минимальное количество идущих подряд символов, среди которых
встречается не менее 170 «перетроек».
Например, в строке ABCBCBCBDDDHAHAHEF есть 4 «перетройки»: ВСВСВСВ - в этой подстроке З «перетройки», 
НАНАН - в этой подстроке 1 «перетройка».
для выполнения этого задания следует написать программу."""

# Два указателя
"""s = open('files/24_шастин10.txt').readline().rstrip()
m = float('inf')
c = 0
l = 0
for r in range(4, len(s)):
    if s[r - 4: r - 1] == s[r - 2: r + 1]:
        c += 1
    while c >= 170:
        m = min(m, r - l + 1)
        if s[l: l + 3] == s[l + 2: l + 5]:
            c -= 1
        l += 1
print(m)  # 2545440"""
# Сохранение индекса
"""s = open('files/24_шастин10.txt').readline().rstrip()
pos = []
m = float('inf')
for i in range(4, len(s)):
    if s[i - 4: i - 1] == s[i - 2: i + 1]:
        pos.append(i - 4)
    if len(pos) >= 170:
        m = min(m, i - pos[-170] + 1)
print(m)  # 2545440"""

# 24 №19938
"""s = open('files/24_19938.txt').readline()
l = m = 0
c_z = 0
for r in range(len(s)):
    if s[r] == 'Z':
        c_z += 1
    while c_z > 4 or s[l] == '0':
        if s[l] == 'Z':
            c_z -= 1
        l += 1
    if int(s[l:r + 1], 36) % 36 == 0:
        m = max(m, r - l + 1)

print(m)  # 652"""

"""m = 0
s = open('files/24_19938.txt').readline()
s = s.replace('Z', 'Z Z')
s = s.split()
sub = ''
for i in range(len(s)):
    sub = s[i] + s[i + 1] + s[i + 2]
    m = max(m, len(sub))
    sub = ''
print(m - 2)
"""

# 24_горбачев6
"""from re import *
s = open('files/24_горбачев6.txt').readline()
expr = findall('(?:[1-9, AB]+)(?:[-.+*][1-9, AB]+)+', s)
ans = max(expr, key=len)
print(len(ans), ans)   # 53"""

# 21421
"""from re import *
s = open('files/24_21421.txt').readline()
expr = findall(f'(?:[1-9, AB][0-9, AB]*)', s)
ans = max([x for x in expr if int(x, 12) % 2 == 0], key=len)
print(len(ans), ans)  # 19"""

# Кабанов
""" from re import *

s = open('files/24_21421.txt').readline()

reg = f'[1-9AB][0-9AB]*[02468A]'
reg = rf'(?=({reg}))'
m = max((x.group(1) for x in finditer(reg, s)), key=len)
print(m)
print(len(m))  # 19"""

# ЕГКР 19.04 В1
# Двойным циклом
"""s = open('files/24_егкр19.04_1.txt').readline()

m = 10000
for l in range(len(s)):
    for r in range(l + m, l, -1):
        c = s[l:r + 1]
        if c.count('QFG') < 105:
            break
        elif c.count('QFG') == 105 and c[0] != 'Q':
            m = min(m, len(c))
    # if l % 1000000 == 0:
    #     print(l, len(s), m)  
print(m)  # 379"""

# Двумя указателями
"""s = open('files/24_егкр19.04_1.txt').readline()

l = 0
m = '0' * 1000
k = 0
sub = ''

for r in range(2, len(s)):
    if s[r - 2] + s[r - 1] + s[r] == 'QFG':
        k += 1
    while k == 105:
        if s[l] + s[l + 1] + s[l + 2] == 'QFG':
            k -= 1
        l += 1
        if k == 105 and s[l] != 'Q':
            m = min(m, s[l:r+1], key=len)
print(m)
print(len(m))  # 379"""

# ЕГКР 19.04 В2
# Кабанов
# Двойным циклом
"""s = open('files/24_егкр19.04_2.txt').readline()

m = 10000
for l in range(len(s)):
    for r in range(l + m, l, -1):
        c = s[l:r + 1]
        if c.count('RSQ') < 130:
            break
        elif c.count('RSQ') == 130 and c[-1] != 'Q':
            m = min(m, len(c))
    # if l % 1_000_000 == 0:
    #     print(l, len(s), m)
print(m)  # 497"""

# Двумя указателями
"""s = open('files/24_егкр19.04_2.txt').readline()

l, k = 0, 0
m = 10000
for r in range(2, len(s)):
    if s[r - 2] + s[r - 1] + s[r] == 'RSQ':
        k += 1
    while k == 130 and s[r] != 'Q':
        m = min(m, r - l + 1)
        if s[l] + s[l + 1] + s[l + 2] == 'RSQ':
            k -= 1
        l += 1
print(m)  # 497"""
