# https://kompege.ru/variant?kim=25095565
"""№ 2651 Сборник ЕГЭ Ушакова 2022 (Уровень: Средний)
(Д. Ушаков) Иван коллекционирует старые марки.
Он собирает все марки, которые ему удаётся найти,
которые были выпущены в его стране за определённые годы.
Иван знает, что в эти годы каждый год выпускалось 8 различных типов марок.
Иван решил проверить свою коллекцию и понять,
скольких видов марок ему не хватает и для какого самого позднего года
ему не хватает наибольшего количества марок до полного набора.
Входные данные.
В первой строке входного файла записано число
N - количество марок, которые собрал Иван (натуральное число, не превышающее 10 000).
В следующих N строках записано по два числа.
Первое число - год выпуска марки.
Второе число - тип марки (натуральное число от 1 до 8).
Запишите в ответе два числа: количество видов марок,
которых не хватает Ивану на интервале от 1961 до 1991 года включительно,
и самый поздний год,
в котором ему не хватает наибольшего количества марок до полного набора."""

"""f = open('files/26_2651.txt')
# f = open('files/26_2651_example.txt')
n = int(f.readline())
data = []
for _ in range(n):
    s = list(map(int, f.readline().split()))
    if s not in data:
        data.append(s)
data.sort()
ans = [[[0, 0]]]
for i in range(len(data)):
    if data[i][0] != ans[-1][0][0]:
        ans.append([data[i]])
    else:
        ans[-1].append(data[i])
ans.remove(ans[0])
print(ans)
print(sum((8 - len(x)) for x in ans))  # 38
mn_ln = min(len(x) for x in ans)
mn = [x for x in ans if len(x) == mn_ln]
print(max(mn)[0][0]) # 38 1985"""

"""№ 7626 Досрочная волна 2023 (Уровень: Средний)
В камере хранения аэропорта есть K ячеек для хранения багажа туристов. 
Все ячейки пронумерованы, начиная с единицы. 
Известно время, в которое каждый турист придёт оставить свой багаж, 
и в какое время он заберёт его. С приходом каждого туриста его багаж кладётся 
в свободную ячейку с наименьшим номером. Для того, чтобы разгрузить или загрузить ячейку багажом, 
необходима 1 минута. Со следующей минуты можно положить в освободившуюся ячейку багаж другого туриста. 
Если турист пришёл, но свободных ячеек нет – он багаж оставить не может, поэтому уходит.
Определите, сколько всего туристов придут и оставят свой багаж в ячейках за 24 часа и номер ячейки, 
в которую положат последний багаж. Если вариантов выбрать ячейку несколько – выберите свободную ячейку 
с наименьшим номером.
Входные данные
В первой строке входного файла находится число 
K – количество ячеек в аэропорту (натуральное число, не превышающее 1000). 
Во второй строке находится число N – количество туристов, 
которые собираются воспользоваться ячейками для багажа. 
В следующих N строках находятся два значения: 
минута размещения багажа и минута, до которого планируется хранить багаж в ячейке, 
отсчёт ведётся от начала суток (все числа неотрицательные, не превышающие 1440), 
для каждого туриста – в отдельной строке.
Запишите в ответе два целых числа: сначала количество туристов, 
которое сможет воспользоваться ячейками для багажа за 24 часа, 
затем наименьший номер ячейки, в которую положат последний багаж."""

"""f = open('files/26_7626.txt')
# f = open('files/26_7626_example.txt')
k = int(f.readline())
n = int(f.readline())
data = sorted(list(map(int, f.readline().split())) for _ in range(n))
camera = [-1] * k
ans = [0, 0]
for i in range(len(data)):
    for j in range(k):
        if (camera[j] + 1) <= data[i][0]:
            camera[j] = data[i][1]
            ans[0] += 1
            ans[1] = j + 1
            break
print(ans)  # 581 59"""

"""№ 2650 Сборник ЕГЭ Ушакова 2022 (Уровень: Средний)
(Д. Ушаков) На производстве станок с ЧПУ обрабатывал некоторый набор деталей. 
В каждый момент времени станок может обрабатывать только одну деталь. 
Каждая деталь изготавливалась в определённый промежуток времени с момента начала рабочего дня. 
Простоем считается временной участок длиной не менее M секунд, в которые не обрабатывается ни одна деталь. 
Инженер решил узнать, какое количество простоев произошло за день и какова длительность наибольшего простоя. 
Общая длительность рабочего дня L секунд.
Входные данные.
В первой строке входного файла находятся три числа через пробел: 
число L - общая длина рабочего дня (натуральное число не превышающее 109), 
число M - минимальная длительность простоя в секундах (натуральное число, не превышающее 10 000), 
число N - количество изготовленных деталей (натуральное число, не превышающее 10 000). 
В следующих N строках находится по два числа через пробел. 
Первое число - время начало обработки от начала рабочего дня (натуральное число, не превышающее 109). 
Второе число - длительность обработки (натуральное число, не превышающее 105).
Запишите в ответе два числа: количество простоев произошло за день и какова длительность наибольшего простоя."""

"""f = open('files/26_2650.txt')
L, M, N = map(int, f.readline().split())
data = sorted([list(map(int, f.readline().split())) for _ in range(N)], key=lambda x: x[0])

intervals = []
prev_end = 0  # начало рабочего дня

for start, duration in data:
    end = min(start + duration, L)  # не выходим за пределы рабочего дня
    if start > prev_end:
        intervals.append((prev_end, start))
    prev_end = max(prev_end, end)  # учитываем перекрытие деталей

# Добавляем интервал от последней детали до конца дня
if prev_end < L:
    intervals.append((prev_end, L))

# Фильтруем интервалы по минимальной длине M
filtered = [interval for interval in intervals if interval[1] - interval[0] >= M]
count = len(filtered)
max_duration = max((b - a for a, b in filtered))

print(count, max_duration)  # 577 24426"""

# f = open("files/26_2650.txt")
#
# l, m, n = map(int, f.readline().split())
# nums = [list(map(int, i.split())) for i in f]
# nums.append([l, 0])
# nums.sort()
#
# otrezki = []
# while nums:
#     past = nums[0][0] + nums[0][1]
#     nums.pop(0)
#     while nums and nums[0][0] - past < m:
#         past = nums[0][0] + nums[0][1]
#         nums.pop(0)
#     if len(nums) > 0:
#         otrezki.append(nums[0][0] - past)
# print(len(otrezki), max(otrezki))

"""№ 9847 Основная волна 27.06.23 (Уровень: Сложный)
Система наблюдения ежеминутно фиксирует вход и выход посетителей магазина 
(в минутах, прошедших от начала суток). 
Считается, что в моменты фиксации входа и выхода посетитель находится в магазине. 
Нулевая минута соответствует моменту открытия магазина, который работает 24 ч в сутки без перерыва. 
Менеджер магазина анализирует данные системы наблюдения за прошедшие сутки, 
и выявляет отрезки времени наибольшей длины, 
в течение которых число посетителей, находящихся в магазине, не изменялось. 
Далее менеджер выбирает пики посещаемости — промежутки времени, к
огда количество посетителей в магазине было наибольшим. 
Пиков посещаемости в течение суток может быть несколько.
Входной файл содержит время входа и выхода каждого посетителя магазина. 
Определите, сколько пиков посещаемости было в течение суток, 
и укажите число посетителей в момент пика посещаемости.
Входные данные
В первой строке входного файла находится натуральное число N (N < 10000) - количество посетителей магазина.
Следующие N строк содержат пары чисел, обозначающих соответственно время входа и время выхода посетителя 
(все числа натуральные, не превышающие 1440).
Запишите в ответе два натуральных числа: сначала найденное количество пиков посещаемости, 
а затем число посетителей в момент пика посещаемости."""

"""f = open('files/26_9847.txt')
n = int(f.readline())
data = list(list(map(int, s.split())) for s in f)
# n = 6
# data = [[10, 50], [100, 150], [110, 155], [120, 160], [130, 170], [151, 170]]

time = [0] * 1441
ans = [0, 0]

for i in range(n):
    for j in range(data[i][0], data[i][1]):
        time[j] += 1
mx = max(time)
time_mx = [[0]]
i = 0
for i in range(1441):
    if time[i] == mx:
        if time_mx[-1][-1] + 1 == i:
            time_mx[-1].append(i)
        else:
            time_mx.append([i])
time_mx.remove([0])
print(time)
print(time_mx)

ans[0] = len(time_mx)
ans[1] = mx
print(ans)  # 2 643"""

"""№ 13101 (Уровень: Средний)
В отделении банка работают два окна для обслуживания клиентов. 
Некоторые услуги могут быть оказаны только при обращении в определённое окно, 
некоторые – при обращении в любое окно. Клиент входит в отделение и встаёт в очередь к тому окну, 
которое оказывает необходимую ему услугу. Если услуга может быть оказана в любом окне, клиент выбирает то, 
в очереди к которому в данный момент меньше людей. Если очереди в оба окна одинаковые, 
клиент выбирает окно с меньшим номером. 
При этом если в очереди к выбранному окну уже стоит 14 или более человек 
(включая человека, которого обслуживают в данный момент), пришедший клиент сразу уходит.
Если момент завершения обслуживания одного или нескольких клиентов совпадает с моментом прихода нового клиента, 
то можно считать, что новый клиент пришёл после того, 
как обслуживание ранее пришедшего клиента завершилось и очередь сократилась.
Входные данные
Первая строка входного файла содержит целое число N (N ≤ 1000) – общее количество клиентов, 
пришедших в отделение за один рабочий день. 
Каждая из следующих N строк описывает одного клиента и содержит 3 целых числа: 
время прихода клиента в отделение (количество минут с начала рабочего дня), 
время, необходимое для обслуживания данного клиента, и номер окна, 
в которое ему необходимо обратиться (0 означает, что клиент может обратиться в любое окно). 
Гарантируется, что никакие два клиента не приходят одновременно.
Определите, сколько клиентов будет обслужено в течение дня в окне номер 2 и 
сколько клиентов покинет отделение из-за слишком больших очередей.
В ответе запишите два целых числа: сначала количество клиентов, 
обслуженных в окне номер 2, затем количество необслуженных клиентов.
"""

"""f = open('files/26_13101.txt')
n = int(f.readline())
a = []
for s in f:
    st, d, t = [int(x) for x in s.split()]
    a += [[st, d, t]]

a.sort()

q = [[], []]
k1 = 0
k2 = 0
for st, d, t in a:
    # в очереди остаются только те, которые еще стоят в очереди
    # (время окончания которых позже времени прихода нового клиента)
    q[0] = [x for x in q[0] if x > st]
    q[1] = [x for x in q[1] if x > st]
    # клиент выбирает окно
    if t == 1 or (t == 0 and len(q[0]) <= len(q[1])):
        # если очередь длинная, то сразу уходит
        if len(q[0]) >= 14:
            k2 += 1  # ушли не обслуженными
            continue
        # если очередь пустая, то сразу идет к окну
        # иначе только после послднего клиента в очереди
        if len(q[0]) == 0:  q[0] += [st + d]
        else:  q[0] += [max(q[0]) + d]
    else:
        # если очередь длинная, то сразу уходит
        if len(q[1]) >= 14:
            k2 += 1
            continue
        k1 += 1  # кого обслужили во втором окне
        # если очередь пустая, то сразу идет к окну
        # иначе только после послднего клиента в очереди
        if len(q[1]) == 0:  q[1] += [st + d]
        else:  q[1] += [max(q[1]) + d]
print(k1, k2)  # 126 469"""

